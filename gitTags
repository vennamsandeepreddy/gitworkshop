What are tags?
In Git, tags are used to label specific commits in a repository’s history. They serve as reference points, making it easier to identify and access important milestones, releases, or significant points in the project’s development. Tags can be attached to commits, branches, or even individual files. They provide a way to mark specific versions of your project and provide a stable reference for future use.

Different kinds of tags
Lightweight Tags:
Lightweight tags are simply pointers to specific commits without any additional metadata. They are created using the git tag command followed by the tag name. For example:

git tag v1.0.0
This command creates a lightweight tag named “v1.0.0” at the current commit.

Annotated Tags:
Annotated tags, on the other hand, are more feature-rich and include additional information such as the tagger’s name, email, date, and an optional message. Annotated tags are created using the git tag -a command. For example:

git tag -a v1.0.0 -m "Release version 1.0.0"
This command creates an annotated tag named “v1.0.0” at the current commit with the specified message.

Tagging specific commit
To tag a specific commit, you can provide the commit hash along with the git tag command. For example:

git tag v1.0.0 <commit-hash>
Replace <commit-hash> with the commit hash you want to tag.

Deleting a Tag
To delete a tag, you can use the git tag -d command followed by the tag name. For example:

git tag -d v1.0.0
This command deletes the tag named “v1.0.0”.

Related Commands for Working with Tags
git tag: Lists all tags in the repository.
git tag -l <pattern>: Lists tags matching a specific pattern.
git show <tag-name>: Displays information about a specific tag, including the commit it points to and any associated metadata.
git push origin <tag-name>: Pushes a specific tag to a remote repository.
git push origin --tags: Pushes all tags to a remote repository.
git fetch --tags: Fetches tags from a remote repository.
git checkout <tag-name>: Checks out the commit associated with the specified tag, creating a detached HEAD state.
git tag -n: Running this command will list all the tags in your repository along with their associated annotation messages.
